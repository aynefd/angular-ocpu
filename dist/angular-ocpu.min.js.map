{"version":3,"sources":["ocpu.js"],"names":[],"mappings":"mEAkBU,SAAW,QAAA,KAAA,SAAA,EAAA,WAOb,GAAO,EAAA,EAAA,qBAGT,IAAA,EACE,KAAA,SAGF,GAAO,SAAA,4BAIP,EAAO,UAAU,SAAc,GAC7B,MAAA,GAAS,IAAO,EAAA,MAAA,GAAA,QAAiC,oBAMjD,GAAc,wBAEhB,EAAU,OAAQ,sBAAA,EAAA,KAAA,uBAKd,GAAI,EAAA,MAAM,KAAQ,IAAA,IACV,EAAA,YAER,EAAA,KAAS,4CAEV,KAAM,EAAA,OACT,QAAO,SAAS,EAAA,EAAA,qFAGlB,EAAa,EAAK,mBAAM,EAAA,OAAA,gFAIpB,MAAA,EAAU,sBAIR,GAAA,EAAQ,SACG,EAAA,OAkBf,oBAfE,SAAS,6DAWP,EAAS,OAAM,KAIjB,EAAQ,gBAGN,GAAS,OACT,EAAQ,MAAA,OACV,KAAK,kCAAsB,EAAoB,oGAM/C,SAAM,WAAA,EAAA,MAAA,UAAA,SAAA,OAAA,EAAA,MAAA,oIAOV,IAAc,WAAT,SAAS,UAAA,WAAA,EAAA,MAAA,SACd,KAAO,0IArFE,EAAA,cAAA,YACL","file":"angular-ocpu.min.js","sourcesContent":["/*jslint indent: 2 */\n/*global angular, File, FileList, location, document, XMLHttpRequest */\n\n// NOTE: Most of the code below is a slightly cleaned up copy of:\n//       https://github.com/jeroenooms/opencpu.js/blob/master/opencpu-0.5.js\n\nangular.module('opencpu', [])\n\n  .service('$ocpu', function ($http, $q) {\n    'use strict';\n\n    var d = {\n      rPath: document.createElement('a'),\n      rCors: false\n    }, ocpu = {};\n    d.rPath.href = \"../R\";\n\n    function session(loc, key, data) {\n      var dSession = {\n        location: loc,\n        key: key,\n        data: data\n      };\n\n      dSession.toString = function () {\n        return \"Session\";\n      };\n\n      dSession.getObject = function (name) {\n        return $http.get(loc + \"R/\" + (name || \".val\") + \"/json\");\n      };\n\n      return dSession;\n    }\n\n    function httpError(deferred) {\n      return function (data, status) {\n        deferred.reject(\"OpenCPU error HTTP \" + status + \"\\n\" + data);\n      };\n    }\n\n    function rFunctionCall(fun, args) {\n      var url = d.rPath.href + \"/\" + fun,\n        deferred = $q.defer();\n\n      if (!fun) { throw \"rFunctionCall called without fun\"; }\n\n      $http.post(url, args || {})\n        .success(function (data, status, headers, config) {\n          /*jslint unparam: true */\n          var loc = headers(\"Location\") || deferred.reject(\"OpenCPU error: Location response header missing.\"),\n            key = headers(\"X-ocpu-session\") || deferred.reject(\"OpenCPU error: X-ocpu-session response header missing.\");\n\n          deferred.resolve(session(loc, key, data));\n        })\n        .error(httpError(deferred));\n      return deferred.promise;\n    }\n\n    function rpc(fun, args) {\n      var deferred = $q.defer();\n\n      rFunctionCall(fun, args).then(\n        function (session) {\n          // The http call to: http(s)://server/ocpu/${APP}/R/${function} has\n          // succeeded and returned us a session. Next we need to retrieve the\n          // object of the session and we're done.\n          session.getObject()\n            .success(deferred.resolve)\n            .error(httpError(deferred));\n        },\n        function rejected(reason) {\n          // The http call to: http(s)://server/ocpu/${APP}/R/${function} has\n          // failed for some reason.\n          deferred.reject(reason);\n        }\n      );\n\n      return deferred.promise;\n    }\n\n    function seturl(newpath) {\n      if (!newpath.match(\"/R$\")) {\n        throw \"ERROR! Trying to set R url to: \" + newpath + \". Path to an OpenCPU R package must end with '/R'\";\n      }\n\n      d.rPath = document.createElement('a');\n      d.rPath.href = newpath;\n\n      if (location.protocol !== d.rPath.protocol || location.host !== d.rPath.host) {\n        d.rCors = true;\n        if ((new XMLHttpRequest()).withCredentials === undefined) {\n          throw \"This browser does not support CORS. Try using Firefox or Chrome.\";\n        }\n      }\n\n      if (location.protocol === \"https:\" && d.rPath.protocol !== \"https:\") {\n        throw \"Page is hosted on HTTPS but using a (non-SSL) HTTP OpenCPU server. This is insecure and most browsers will not allow this.\";\n      }\n    }\n\n    //exported functions\n    ocpu.call = rFunctionCall;\n    ocpu.rpc = rpc;\n    ocpu.seturl = seturl;\n    return ocpu;\n  });\n"],"sourceRoot":"/source/"}